{"version":3,"sources":["Header/Header.js","Actions.js","Stores.js","GBForm/GBForm.js","GBList/GBList.js","GBBottom/GBBottom.js","AppContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","pathname","this","props","location","linkName","linkTo","react_default","a","createElement","className","id","Link","to","Component","HeaderWithRouter","withRouter","displayName","withMezzurite","Actions","Reflux","createActions","GuestStore","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","messages","getMessages","listenables","localStorage","getItem","JSON","parse","messagesJSON","stringify","setItem","email","messageBody","console","log","message","text","push","setMessages","setState","prevState","Store","GBForm","onClick","e","_this$state","name","team","length","indexOf","axios","post","guestSignature","then","response","catch","err","handleInputChange","target","value","defineProperty","store","htmlFor","autoComplete","type","onChange","placeholder","style","paddingTop","paddingBottom","GBList","_this2","fetch","results","json","data","map","msg","warn","toString","messageList","index","key","concat","React","GBBottom","position","bottom","marginBottom","PureComponent","mzLog","MezzuritePlugIn","ai","ApplicationInsights","config","extensions","instrumentationKey","maxBatchInterval","disableFetchTracking","loadAppInsights","AppContainer","trackPageView","unlisten","history","listen","action","core","_extensions","operation","Util","newId","children","withMezzuriteRouter","App","BrowserRouter","src_AppContainer","src_Header_Header","Route","exact","path","component","src_GBBottom_GBBottom","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0a3fd0ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport './Header.css';\r\nimport { withMezzurite } from '@microsoft/mezzurite-react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    const { pathname } = this.props.location;\r\n    const linkName = pathname === \"/guestbook\" ? \"Signing Page\" : \"Guestbook\";\r\n    const linkTo = pathname === '/guestbook' ? '/': '/guestbook';\r\n    return (\r\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n      <span className=\"navbar-brand d-flex\">Application Insights Demo Guestbook</span>\r\n          <div className=\"divider-vertical navbar-collapse collapse\" id=\"navbar\">\r\n              <ul className=\"navbar-nav d-flex\">\r\n                  <li className=\"nav-item\">\r\n                      <Link className=\"nav-link\" to={linkTo}>{linkName}</Link>\r\n                  </li>\r\n              </ul>\r\n          </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst HeaderWithRouter = withRouter(Header);\r\nHeaderWithRouter.displayName = Header.displayName = 'Header';\r\nexport default withMezzurite(HeaderWithRouter);\r\n","import Reflux from 'reflux';\r\n\r\nvar Actions = Reflux.createActions([\r\n    \"submit\",\r\n]);\r\n\r\nexport default Actions;","import Reflux from 'reflux';\r\nimport Actions from './Actions'\r\n\r\nclass GuestStore extends Reflux.Store\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.state = {messages: this.getMessages()};\r\n\t\tthis.listenables = Actions;\r\n\t\t//console.log(this.getMessages());\r\n\t}\r\n\r\n\tgetMessages(){\r\n\t\tvar messages = localStorage.getItem('messages');\r\n\t\tif(messages){\r\n\t\t\treturn JSON.parse(messages);\r\n\t\t} else {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\tsetMessages(messages){\r\n\t\tvar messagesJSON = JSON.stringify(messages);\r\n\t\tlocalStorage.setItem('messages',messagesJSON);\r\n\t}\r\n\t\r\n\tonSubmit(email, messageBody)\r\n\t{\r\n\t\tconsole.log(this.state)\r\n\t\tconst message = {\r\n\t\t\temail: email,\r\n\t\t\ttext: messageBody\r\n\t\t};\r\n\r\n\t\tvar messages = this.getMessages();\r\n\t\tmessages.push(message);\r\n\t\tthis.setMessages(messages);\r\n        this.setState((prevState, props)=>{\r\n            return {messages: messages};\r\n        });\r\n\t}\r\n\t\r\n}\r\n\r\nexport default GuestStore;","import React from 'react';\r\nimport Reflux from 'reflux';\r\nimport GuestStore from '../Stores';\r\nimport axios from 'axios';\r\nimport './GBForm.css';\r\nimport { withMezzurite } from '@microsoft/mezzurite-react';\r\n\r\nclass GBForm extends Reflux.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.store = GuestStore;\r\n    this.state = {\r\n      email: '',\r\n      message: '',\r\n      name: ''\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"panel panel-default\">\r\n        <div className=\"panel-body\">\r\n          <div className=\"container form-group\">\r\n            <div className=\"row\">\r\n              <div className=\"col-4\">\r\n                <label htmlFor=\"inputName\">Name</label>\r\n                <form autoComplete=\"new-password\"><input type=\"text\" autoComplete=\"off\" className=\"form-control\" name=\"name\" value={this.state.name} onChange={this.handleInputChange} id=\"nameInput\" placeholder=\"Name (required)\"/></form>\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <label htmlFor=\"inputTeam\">Team</label>\r\n                <input type=\"text\" autoComplete=\"off\" className=\"form-control\" name=\"team\" value={this.state.team} onChange={this.handleInputChange} id=\"teamInput\" placeholder=\"Team Name (optional)\"/>\r\n              </div>\r\n              <div className=\"col-3\">\r\n                <label htmlFor=\"inputAlias\">Email or Alias</label>\r\n                <input type=\"text\" autoComplete=\"off\" className=\"form-control\" name=\"email\" value={this.state.email} onChange={this.handleInputChange} id=\"aliasInput\" placeholder=\"Alias or Email (optional)\"/>\r\n              </div>\r\n            <div className=\"col-11\" style={{paddingTop: '10px', paddingBottom: '10px'}}>\r\n              <label htmlFor=\"inputMessage\">Say something!</label>\r\n              <input type=\"text\" autoComplete=\"off\" className=\"form-control\" name=\"message\" value={this.state.message} onChange={this.handleInputChange} id=\"messageInput\" placeholder=\"Message (optional)\"/>\r\n            </div>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={this.onClick}>Submit</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onClick = (e) => {\r\n    let { email, name, message, team } = this.state;\r\n    if (email.length > 0 && email.indexOf('@') === -1) {\r\n      email += '@microsoft.com';\r\n    }\r\n\r\n    if(this.state.name) {\r\n      axios\r\n        .post('/api/signatures', {\r\n          email: email,\r\n          guestSignature: name,\r\n          message: message,\r\n          team: team\r\n        })\r\n        .then(response => {\r\n          console.log(response, 'Signature added!');\r\n        })\r\n        .catch(err => {\r\n          console.log(err, 'Signature not added');\r\n        });\r\n      this.setState({email: '', message: '', name: '', team: ''});\r\n    }\r\n\r\n\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    const target = e.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState((prevState, props) => {\r\n      return { [name]: value };\r\n    });\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nGBForm.displayName = 'GBForm';\r\nexport default withMezzurite(GBForm);\r\n","import React from 'react';\r\nimport './GBList.css';\r\nimport { withMezzurite } from '@microsoft/mezzurite-react';\r\n\r\nclass GBList extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      messages: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('/api/signatures').then(results => {\r\n      results.json().then(data => {\r\n        const messages = data.map(msg => {return {name: msg.guestSignature, text: msg.message, team: msg.team}});\r\n        this.setState({ messages: messages });\r\n      }).catch(err => console.warn(err.toString()));\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const messageList =  this.state.messages.map((message, index) => {\r\n      return (\r\n          <div key={`${message.name}-${index}`} className=\"list-group-item\">\r\n          <p className=\"h4 list-group-item-heading\">\r\n            {message.name}\r\n            <small className=\"text-muted\">{message.team ? ` - ${message.team}` : ''}</small>\r\n          </p>\r\n          <p className=\"list-group-item-text\">{message.text}</p>\r\n        </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n      <div className=\"list-group\">\r\n        {messageList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGBList.displayName = 'GBList';\r\nexport default withMezzurite(GBList);\r\n","import { withMezzurite } from \"@microsoft/mezzurite-react\";\r\nimport React from 'react';\r\n\r\nclass GBBottom extends React.PureComponent {\r\n    render() {\r\n        return <div style={{position: 'absolute', bottom: 0, marginBottom: '-100px'}}>Component outside of viewport</div>\r\n    }\r\n}\r\n\r\nGBBottom.displayName = 'GBBottom';\r\nexport default withMezzurite(GBBottom);\r\n","import React, { Component } from 'react';\r\nimport { ApplicationInsights, Util } from '@microsoft/applicationinsights-web';\r\nimport {MezzuritePlugIn} from '@microsoft/applicationinsights-mezzurite';\r\nimport {withMezzuriteRouter} from '@microsoft/mezzurite-react';\r\n\r\nvar mzLog = new MezzuritePlugIn();\r\nconst ai = new ApplicationInsights({config: {extensions: [mzLog], instrumentationKey: 'a08f3f2d-9884-4437-b6ec-c835d3d58d82', maxBatchInterval: 100, disableFetchTracking: false}});\r\nai.loadAppInsights();\r\n\r\nclass AppContainer extends Component {\r\n    componentWillMount() {\r\n        ai.trackPageView({});\r\n        this.unlisten = this.props.history.listen((location, action) => {\r\n            ai.core._extensions[2].operation.id = Util.newId();\r\n            ai.trackPageView({name: location.pathname});\r\n      });\r\n    }\r\n    componentWillUnmount() {\r\n        this.unlisten();\r\n    }\r\n    render() {\r\n       return (\r\n           <div className=\"App container\">{this.props.children}</div>\r\n        );\r\n    }\r\n}\r\n\r\nAppContainer.displayName = 'AppContainer';\r\nexport default withMezzuriteRouter(AppContainer);\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from './Header/Header';\r\nimport GBForm from './GBForm/GBForm';\r\nimport GBList from './GBList/GBList';\r\nimport GBBottom from './GBBottom/GBBottom';\r\n\r\nimport AppContainer from './AppContainer.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <Router>\r\n          <AppContainer>\r\n            <Header />\r\n            <Route exact path=\"/\" component={GBForm} />\r\n            <Route exact path=\"/guestbook\" component={GBList} />\r\n            <GBBottom />\r\n          </AppContainer>\r\n        </Router>\r\n    );\r\n  }\r\n}\r\n\r\nApp.displayName = 'App';\r\nexport default (App);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap-theme.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}