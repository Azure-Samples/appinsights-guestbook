{"version":3,"sources":["Header/Header.js","Actions.js","Stores.js","GBForm/GBForm.js","GBList/GBList.js","AppContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","pathname","this","props","location","linkName","linkTo","react_default","a","createElement","className","id","Link","to","Component","displayName","withMezzurite","Actions","Reflux","createActions","GuestStore","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","messages","getMessages","listenables","localStorage","getItem","JSON","parse","messagesJSON","stringify","setItem","email","messageBody","console","log","message","text","push","setMessages","setState","prevState","Store","GBForm","onClick","e","_this$state","name","team","length","indexOf","axios","post","guestSignature","then","response","catch","err","handleInputChange","target","value","defineProperty","store","htmlFor","autoComplete","type","onChange","placeholder","style","paddingTop","paddingBottom","GBList","_this2","fetch","results","json","data","map","msg","warn","toString","messageList","index","key","concat","React","mzLog","MezzuritePlugIn","ai","ApplicationInsights","config","extensions","instrumentationKey","maxBatchInterval","disableFetchTracking","loadAppInsights","AppContainer","trackPageView","unlisten","history","listen","action","core","_extensions","operation","Util","newId","children","withMezzuriteRouter","App","BrowserRouter","src_AppContainer","Route","path","component","exact","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oXAKMA,mLACK,IACCC,EAAaC,KAAKC,MAAMC,SAAxBH,SACFI,EAAwB,eAAbJ,EAA4B,eAAiB,YACxDK,EAAsB,eAAbL,EAA4B,IAAK,aAChD,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAhB,uCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CAA4CC,GAAG,UAC1DJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMF,UAAU,WAAWG,GAAIP,GAASD,cAXrCS,aAoBrBd,EAAOe,YAAc,SACNC,kBAAchB,4BCpBdiB,EAJDC,IAAOC,cAAc,CAC/B,WC0CWC,cAxCd,SAAAA,IACA,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApB,KAAAkB,IACCC,EAAAC,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAxB,QACKyB,MAAQ,CAACC,SAAUP,EAAKQ,eAC7BR,EAAKS,YAAcb,EAHpBI,6EAQC,IAAIO,EAAWG,aAAaC,QAAQ,YACpC,OAAGJ,EACKK,KAAKC,MAAMN,GAEX,uCAIGA,GACX,IAAIO,EAAeF,KAAKG,UAAUR,GAClCG,aAAaM,QAAQ,WAAWF,oCAGxBG,EAAOC,GAEfC,QAAQC,IAAIvC,KAAKyB,OACjB,IAAMe,EAAU,CACfJ,MAAOA,EACPK,KAAMJ,GAGHX,EAAW1B,KAAK2B,cACpBD,EAASgB,KAAKF,GACdxC,KAAK2C,YAAYjB,GACX1B,KAAK4C,SAAS,SAACC,EAAW5C,GACtB,MAAO,CAACyB,SAAUA,YApCLV,IAAO8B,wBCI1BC,qBAEJ,SAAAA,EAAY9C,GAAM,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApB,KAAA+C,IAChB5B,EAAAC,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAA2B,GAAAvB,KAAAxB,KAAMC,KAuCR+C,QAAU,SAACC,GAAM,IAAAC,EACsB/B,EAAKM,MAApCW,EADSc,EACTd,MAAOe,EADED,EACFC,KAAMX,EADJU,EACIV,QAASY,EADbF,EACaE,KACxBhB,EAAMiB,OAAS,IAA6B,IAAxBjB,EAAMkB,QAAQ,OACpClB,GAAS,kBAGRjB,EAAKM,MAAM0B,OACZI,IACGC,KAAK,kBAAmB,CACvBpB,MAAOA,EACPqB,eAAgBN,EAChBX,QAASA,EACTY,KAAMA,IAEPM,KAAK,SAAAC,GACJrB,QAAQC,IAAIoB,EAAU,sBAEvBC,MAAM,SAAAC,GACLvB,QAAQC,IAAIsB,EAAK,yBAErB1C,EAAKyB,SAAS,CAACR,MAAO,GAAII,QAAS,GAAIW,KAAM,GAAIC,KAAM,OA5DzCjC,EAkElB2C,kBAAoB,SAACb,GACnB,IAAMc,EAASd,EAAEc,OACXC,EAAQD,EAAOC,MACfb,EAAOY,EAAOZ,KAEpBhC,EAAKyB,SAAS,SAACC,EAAW5C,GACxB,OAAOmB,OAAA6C,EAAA,EAAA7C,CAAA,GAAG+B,EAAOa,MAtEnB7C,EAAK+C,MAAQhD,EACbC,EAAKM,MAAQ,CACXW,MAAO,GACPI,QAAS,GACTW,KAAM,IANQhC,wEAWhB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAO4D,QAAQ,aAAf,QACA9D,EAAAC,EAAAC,cAAA,QAAM6D,aAAa,gBAAe/D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOD,aAAa,MAAM5D,UAAU,eAAe2C,KAAK,OAAOa,MAAOhE,KAAKyB,MAAM0B,KAAMmB,SAAUtE,KAAK8D,kBAAmBrD,GAAG,YAAY8D,YAAY,sBAEpMlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAO4D,QAAQ,aAAf,QACA9D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOD,aAAa,MAAM5D,UAAU,eAAe2C,KAAK,OAAOa,MAAOhE,KAAKyB,MAAM2B,KAAMkB,SAAUtE,KAAK8D,kBAAmBrD,GAAG,YAAY8D,YAAY,0BAElKlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAO4D,QAAQ,cAAf,kBACA9D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOD,aAAa,MAAM5D,UAAU,eAAe2C,KAAK,QAAQa,MAAOhE,KAAKyB,MAAMW,MAAOkC,SAAUtE,KAAK8D,kBAAmBrD,GAAG,aAAa8D,YAAY,+BAEvKlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASgE,MAAO,CAACC,WAAY,OAAQC,cAAe,SACjErE,EAAAC,EAAAC,cAAA,SAAO4D,QAAQ,gBAAf,kBACA9D,EAAAC,EAAAC,cAAA,SAAO8D,KAAK,OAAOD,aAAa,MAAM5D,UAAU,eAAe2C,KAAK,UAAUa,MAAOhE,KAAKyB,MAAMe,QAAS8B,SAAUtE,KAAK8D,kBAAmBrD,GAAG,eAAe8D,YAAY,yBAG3KlE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBwC,QAAShD,KAAKgD,SAAlD,oBAnCShC,IAAOJ,YAkF5BmC,EAAOlC,YAAc,SACNC,kBAAciC,GCtFvB4B,qBAEJ,SAAAA,EAAY1E,GAAM,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApB,KAAA2E,IAChBxD,EAAAC,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAuD,GAAAnD,KAAAxB,KAAMC,KACDwB,MAAQ,CACXC,SAAU,IAHIP,mFAOE,IAAAyD,EAAA5E,KAClB6E,MAAM,mBAAmBnB,KAAK,SAAAoB,GAC5BA,EAAQC,OAAOrB,KAAK,SAAAsB,GAClB,IAAMtD,EAAWsD,EAAKC,IAAI,SAAAC,GAAQ,MAAO,CAAC/B,KAAM+B,EAAIzB,eAAgBhB,KAAMyC,EAAI1C,QAASY,KAAM8B,EAAI9B,QACjGwB,EAAKhC,SAAS,CAAElB,SAAUA,MACzBkC,MAAM,SAAAC,GAAG,OAAIvB,QAAQ6C,KAAKtB,EAAIuB,iDAMnC,IAAMC,EAAerF,KAAKyB,MAAMC,SAASuD,IAAI,SAACzC,EAAS8C,GACrD,OACIjF,EAAAC,EAAAC,cAAA,OAAKgF,IAAG,GAAAC,OAAKhD,EAAQW,KAAb,KAAAqC,OAAqBF,GAAS9E,UAAU,mBAChDH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BACVgC,EAAQW,KACT9C,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAcgC,EAAQY,KAAR,MAAAoC,OAAqBhD,EAAQY,MAAS,KAEvE/C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAwBgC,EAAQC,SAKnD,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZ6E,UAlCYI,IAAM7E,YAwC3B+D,EAAO9D,YAAc,SACNC,kBAAc6D,mBCxCzBe,EAAQ,UAAIC,GACVC,EAAK,IAAIC,IAAoB,CAACC,OAAQ,CAACC,WAAY,CAACL,GAAQM,mBAAoB,uCAAwCC,iBAAkB,IAAKC,sBAAsB,KAC3KN,EAAGO,sBAEGC,+LAEER,EAAGS,cAAc,IACjBrG,KAAKsG,SAAWtG,KAAKC,MAAMsG,QAAQC,OAAO,SAACtG,EAAUuG,GACjDb,EAAGc,KAAKC,YAAY,GAAGC,UAAUnG,GAAKoG,IAAKC,QAC3ClB,EAAGS,cAAc,CAAClD,KAAMjD,EAASH,4DAIrCC,KAAKsG,4CAGN,OACIjG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBR,KAAKC,MAAM8G,iBAb3BnG,aAkB3BwF,EAAavF,YAAc,eACZmG,kBAAoBZ,GCpB7Ba,mLAEF,OACI5G,EAAAC,EAAAC,cAAC2G,EAAA,EAAD,KACE7G,EAAAC,EAAAC,cAAC4G,EAAD,KACE9G,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWxH,IAC3BO,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAK,IAAIC,UAAWvE,IACjC1C,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAK,aAAaC,UAAW3C,aAPpC/D,aAclBqG,EAAIpG,YAAc,MACFoG,QCbVO,EAAcC,QACW,cAA7BC,OAAOxH,SAASyH,UAEe,UAA7BD,OAAOxH,SAASyH,UAEhBD,OAAOxH,SAASyH,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTpE,KAAK,SAAAwE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3G,QACfsG,UAAUC,cAAcO,WAK1BjG,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBqB,MAAM,SAAA4E,GACLlG,QAAQkG,MAAM,4CAA6CA,iBC9DjEC,IAASC,OAAOrI,EAAAC,EAAAC,cAACoI,EAAD,MAASC,SAASC,eAAe,SDYlC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBrB,OAAOxH,UAC3C8I,SAAWtB,OAAOxH,SAAS8I,OAIvC,OAGFtB,OAAOuB,iBAAiB,OAAQ,WAC9B,IAAMnB,EAAK,GAAAtC,OAAMuD,GAAN,sBAEPvB,EAwCV,SAAiCM,GAE/BjD,MAAMiD,GACHpE,KAAK,SAAAC,GAGkB,MAApBA,EAASuF,SACuD,IAAhEvF,EAASwF,QAAQC,IAAI,gBAAgB9F,QAAQ,cAG7CyE,UAAUC,cAAcqB,MAAM3F,KAAK,SAAAwE,GACjCA,EAAaoB,aAAa5F,KAAK,WAC7BgE,OAAOxH,SAASqJ,aAKpB1B,EAAgBC,KAGnBlE,MAAM,WACLtB,QAAQC,IACN,mEA5DAiH,CAAwB1B,GAGxBD,EAAgBC,MC9BxB2B","file":"static/js/main.c797c699.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\nimport { withMezzurite } from '@microsoft/mezzurite-react';\n\nclass Header extends Component {\n  render() {\n    const { pathname } = this.props.location;\n    const linkName = pathname === \"/guestbook\" ? \"Signing Page\" : \"Guestbook\";\n    const linkTo = pathname === '/guestbook' ? '/': '/guestbook';\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n      <span className=\"navbar-brand d-flex\">Application Insights Demo Guestbook</span>\n      <div className=\"divider-vertical navbar-collapse collapse\" id=\"navbar\">\n          <ul className=\"navbar-nav d-flex\">\n              <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to={linkTo}>{linkName}</Link>\n              </li>\n          </ul>\n      </div>\n  </nav>\n    );\n  }\n}\n\nHeader.displayName = 'Header';\nexport default withMezzurite(Header);\n","import Reflux from 'reflux';\n\nvar Actions = Reflux.createActions([\n    \"submit\",\n]);\n\nexport default Actions;","import Reflux from 'reflux';\nimport Actions from './Actions'\n\nclass GuestStore extends Reflux.Store\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.state = {messages: this.getMessages()};\n\t\tthis.listenables = Actions;\n\t\t//console.log(this.getMessages());\n\t}\n\n\tgetMessages(){\n\t\tvar messages = localStorage.getItem('messages');\n\t\tif(messages){\n\t\t\treturn JSON.parse(messages);\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tsetMessages(messages){\n\t\tvar messagesJSON = JSON.stringify(messages);\n\t\tlocalStorage.setItem('messages',messagesJSON);\n\t}\n\t\n\tonSubmit(email, messageBody)\n\t{\n\t\tconsole.log(this.state)\n\t\tconst message = {\n\t\t\temail: email,\n\t\t\ttext: messageBody\n\t\t};\n\n\t\tvar messages = this.getMessages();\n\t\tmessages.push(message);\n\t\tthis.setMessages(messages);\n        this.setState((prevState, props)=>{\n            return {messages: messages};\n        });\n\t}\n\t\n}\n\nexport default GuestStore;","import React from 'react';\nimport Reflux from 'reflux';\nimport GuestStore from '../Stores';\nimport axios from 'axios';\nimport './GBForm.css';\nimport { withMezzurite } from '@microsoft/mezzurite-react';\n\nclass GBForm extends Reflux.Component {\n\n  constructor(props){\n    super(props);\n    this.store = GuestStore;\n    this.state = {\n      email: '',\n      message: '',\n      name: ''\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"panel panel-default\">\n        <div className=\"panel-body\">\n          <div className=\"container form-group\">\n            <div className=\"row\">\n              <div className=\"col-4\">\n                <label htmlFor=\"inputName\">Name</label>\n                <form autoComplete=\"new-password\"><input type=\"text\" autoComplete=\"off\" className=\"form-control\" name=\"name\" value={this.state.name} onChange={this.handleInputChange} id=\"nameInput\" placeholder=\"Name (required)\"/></form>\n              </div>\n              <div className=\"col-4\">\n                <label htmlFor=\"inputTeam\">Team</label>\n                <input type=\"text\" autoComplete=\"off\" className=\"form-control\" name=\"team\" value={this.state.team} onChange={this.handleInputChange} id=\"teamInput\" placeholder=\"Team Name (optional)\"/>\n              </div>\n              <div className=\"col-3\">\n                <label htmlFor=\"inputAlias\">Email or Alias</label>\n                <input type=\"text\" autoComplete=\"off\" className=\"form-control\" name=\"email\" value={this.state.email} onChange={this.handleInputChange} id=\"aliasInput\" placeholder=\"Alias or Email (optional)\"/>\n              </div>\n            <div className=\"col-11\" style={{paddingTop: '10px', paddingBottom: '10px'}}>\n              <label htmlFor=\"inputMessage\">Say something!</label>\n              <input type=\"text\" autoComplete=\"off\" className=\"form-control\" name=\"message\" value={this.state.message} onChange={this.handleInputChange} id=\"messageInput\" placeholder=\"Message (optional)\"/>\n            </div>\n            </div>\n            <button className=\"btn btn-primary\" onClick={this.onClick}>Submit</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  onClick = (e) => {\n    let { email, name, message, team } = this.state;\n    if (email.length > 0 && email.indexOf('@') === -1) {\n      email += '@microsoft.com';\n    }\n\n    if(this.state.name) {\n      axios\n        .post('/api/signatures', {\n          email: email,\n          guestSignature: name,\n          message: message,\n          team: team\n        })\n        .then(response => {\n          console.log(response, 'Signature added!');\n        })\n        .catch(err => {\n          console.log(err, 'Signature not added');\n        });\n      this.setState({email: '', message: '', name: '', team: ''});\n    }\n\n\n  }\n\n  handleInputChange = (e) => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState((prevState, props) => {\n      return { [name]: value };\n    });\n\n  }\n\n\n}\n\nGBForm.displayName = 'GBForm';\nexport default withMezzurite(GBForm);\n","import React from 'react';\nimport './GBList.css';\nimport { withMezzurite } from '@microsoft/mezzurite-react';\n\nclass GBList extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      messages: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('/api/signatures').then(results => {\n      results.json().then(data => {\n        const messages = data.map(msg => {return {name: msg.guestSignature, text: msg.message, team: msg.team}});\n        this.setState({ messages: messages });\n      }).catch(err => console.warn(err.toString()));\n    });\n  }\n\n\n  render() {\n    const messageList =  this.state.messages.map((message, index) => {\n      return (\n          <div key={`${message.name}-${index}`} className=\"list-group-item\">\n          <p className=\"h4 list-group-item-heading\">\n            {message.name}\n            <small className=\"text-muted\">{message.team ? ` - ${message.team}` : ''}</small>\n          </p>\n          <p className=\"list-group-item-text\">{message.text}</p>\n        </div>\n        );\n    });\n\n    return (\n      <div className=\"list-group\">\n        {messageList}\n      </div>\n    );\n  }\n}\n\nGBList.displayName = 'GBList';\nexport default withMezzurite(GBList);\n","import React, { Component } from 'react';\nimport { ApplicationInsights, Util } from '@microsoft/applicationinsights-web';\nimport {MezzuritePlugIn} from '@microsoft/applicationinsights-mezzurite';\nimport {withMezzuriteRouter} from '@microsoft/mezzurite-react';\n\nvar mzLog = new MezzuritePlugIn();\nconst ai = new ApplicationInsights({config: {extensions: [mzLog], instrumentationKey: 'a08f3f2d-9884-4437-b6ec-c835d3d58d82', maxBatchInterval: 100, disableFetchTracking: false}});\nai.loadAppInsights();\n\nclass AppContainer extends Component {\n    componentWillMount() {\n        ai.trackPageView({});\n        this.unlisten = this.props.history.listen((location, action) => {\n            ai.core._extensions[2].operation.id = Util.newId();\n            ai.trackPageView({name: location.pathname});\n      });\n    }\n    componentWillUnmount() {\n        this.unlisten();\n    }\n    render() {\n       return (\n           <div className=\"App container\">{this.props.children}</div>\n        );\n    }\n}\n\nAppContainer.displayName = 'AppContainer';\nexport default withMezzuriteRouter(AppContainer);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './Header/Header';\nimport GBForm from './GBForm/GBForm';\nimport GBList from './GBList/GBList';\nimport AppContainer from './AppContainer.js';\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n          <AppContainer>\n            <Route path=\"/\" component={Header} />\n            <Route exact path=\"/\" component={GBForm} />\n            <Route exact path=\"/guestbook\" component={GBList} />\n          </AppContainer>\n        </Router>\n    );\n  }\n}\n\nApp.displayName = 'App';\nexport default (App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap-theme.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}